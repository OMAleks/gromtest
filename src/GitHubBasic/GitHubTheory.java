package GitHubBasic;

public class GitHubTheory {
    public static void main(String[] args) {
        System.out.println("I'm learning basic information about git and github");

        /*
                                  00  ОПРЕДЕЛЕНИЕ

        Систем контроля версия/Version Control System (VCS) - это технология, которая позволяет
        хранить код в интернет-хранилище и определять доступ к этому хранилищу для других людей.

        Есть две системы контроля версий (самых популярных): SubVersion (SVN) и Git. Git более
        новая, удобная и разширенная по сравнению с SVN технолгия. Поэтому имеет смысл разбирать
        только Git.


        Git - это технология передачи, хранения и получения кода с помощюь интернет-ресурсов.

        Git - распределенная система управления версиями.



        GitHub - это кластер компьютеров в интернете, которые содержит в себе технологию Git
        и одновременно является хранилищем кода, которым хотят поделиться.

        GitHub - это крупнейший веб-сервис для хостинга IT-проектов и их совместной рахработки.
        Хостинг - хранилище (хранение).

        Repository (репозиторий) - это хранилище, в котором содержится отдельный проект.
        Репозитории могут быть публичными - доступны всем и приватными - с ограниченным доступом.


                                01 РЕГИСТРАЦИЯ НА GITHAB

                                02 СОЗДАНИЕ УДАЛЕННОГО РЕПОЗИТОРИЯ

            (локальный - папка проекта на своем компьютере, а удаленный - на веб ресурсе)
            В верхнем правом углу нажимаем + -> new repository -> write name -> Create repository

            Для переименования: Справа сверху в раскрывающемся меню (правее плюсика) выбираем:
            your repositories - лкм по имени переименуемого проекта - Settings - write new
            Repository name - press Rename.

                                03 ИНТЕГРИРУЕМ ТЕХНОЛОГИЮ Git с IntellijIdea

     А) Скачиваем Гит: google - git download - Windows - (указать путь сохранения) - Save

     Б) Устанавливаем Гит: All Default

     В) Указываем в Идее путь исполняемоего файла технологии гит:
        File - Settings - Version Control - Git
        В поле Path to Git executable пишем свой путь, например: C:\Program Files\Git\bin\git.exe
        (which git - 'which' is not recognized ad an internal or external command)

     Г) Нажимаем Test для подтверждения успешной интеграции

     Д) Указываем в идее свой логин и пароль для ГитХаба:
         File - Settings - Version Control - GitHub - Set login and password - OK


                                04 ЗАГРУЗКА (UPLOAD) ПРОЕКТА НА ГИТХАБ



                            Github workflow - пошаговое действие (алгоритм)
                 который нужно выполнить, чтобы залить проект на гитхаб или скачать с гитхаба

 Working Directory <-ADD!> Staging (index) <COMMIT -> Local Repository <PUSH!-> Remote Repository

            А) Присоеденяем проект в идее к Гиту: VCS - Import into Version Control -
               - Create Git Repository - choose my project - OK
               Теперь проект "Under Git" - под контролем Гита.
               Working Directory - это и есть директория (папка) проекта под контролем гита.
               Файлы андергит стали красного цвета

            Б) Добавляем те файлы из нашего проекта (from  Working Directory), которые хотим залить
               на Гитхаб. Такая операция называется Add. Для этого:

               В браузере папок (в Идее) выбираем нужную папку(ки) или файл(ы) - Git - Add
               Выбранные для переноса файлы стали зеленого цвета

            В) Подтверждаем свой выбор файлов для переноса с добавлением описания. Такая операция
               называется Commit. Для этого: VCS - commit - check/uncheck files - write commit
               message - Commit.
                  (Если нужно удалить из work directory ненужный файл, то выбираем ПКМ - Revert)
               После этого все выбранные файлы НЕ появляются на Гитхабе. Commit - это не загрузка
               файлов на гитхаб!!! Commit собирает все наши изменения в локальное (на нашем компе)
               хранилище - Local Repository.

               !!Хорошая практика!!
                 Выполнять все коммиты во врем работы над проектом не заливая
                 его на гитхаб. И только тогда, когда мы свою задачу закончили, залить проект, в
                 котором будут отмечены все наши коммиты, сделанные во время работы над проектом.
                 Это нужно, чтобы наши коллеги случайно не закачали себе  незаконченный код.


                 !!Чтобы просмотреть историю изменения комитов на гитхабе!!:
                   Заходим в наш проект - вкладка Code - справа от нашего никнейма будут часы и
                   "число" commits. Нажимаем  на эти часы (или слово "commits"). Все.

             Г) Неопсредственная загрузка закоммиченных файлов на гитхаб. Эта операция называется
                Push.

                    Внимание! На гитхабе может быть много наших проектов и каждый проект
                    хранится в своем хранилище. Поэтому при заливке (push) нужно обязательно
                    указать репозиторий,в который будут заливваться наши файлы. Это указание
                    осуществляется через ссылку на конкретный репозиторий. Ссылку можно скопировать
                    с гита:

                    Profile name - Repositories - Repository name - Code open menu ( Go to file
                    Add file  Code) - press copy URL button

                Для того, чтобы попасть в меню загрузки (push):
                    VCS - Git - Push

                Далее, чтобы указать нужный депозиторий выбираем:
                    origin - define Remote - insert URL - ok

                Для того, чтобы запустить процесс заливки:
                    VCS - Git - Push - Push



                                05 СКАЧИВАНИЕ(DOWNLOAD) ПРОЕКТА С ГИТХАБА

            А) Копируем путь (URL) скачивания с ГитХаба:
                Project name - Code (open menu) - Clone with HTTPS - press copy URL button

            Б) Вставляем путь скачивания в Идею:
                VCS - Checking from Version Control - Git - paste URL - Clone (ore Test)













         */


    }
}
